var fs = require('fs');

var utils = {
  processObject: function (ob, handle) {
    var keys = Object.keys(ob);
    if (keys.length) {
      process.nextTick(function run () {
        var k = keys.shift();
        handle(ob[k], k);
        if (keys.length) {
          process.nextTick(run);
        }
      });
    }
  },
  isObject: function (ob) {
    return (typeof ob == 'object' && !Array.isArray(ob) && ob != null);
  },
  isNumber: function (n) {
    return (!isNaN(parseFloat(n)) && isFinite(n));
  },
  // elements in object
  elInOb: function (ob, key) {
    var c = 0;
    for (var k in ob) {
      if (ob[k] == key) c += 1;
    }
    return c;
  },
  // number of elements
  noe: function (ob) {
    return Object.keys(ob).length;
  },
  firstEl: function (ob) {
    for (var k in ob) {
      return ob[k];
    }
  },
  clone: function (ob) {
    var copy = {};
    for (var k in ob) {
      if (this.isObject(ob[k])) {
        copy[k] = this.clone(ob[k]);
      } else {
        copy[k] = ob[k];
      }
    }
    return copy;
  },
  randomString: function (len) {
    var chars = '0123456789' +
                'ABCDEFGHIJKLMNOPQRSTUVWXTZ' +
                'abcdefghiklmnopqrstuvwxyz';

    var generated = '';
    while (len--) {
        var rand = Math.floor(Math.random() * chars.length);
        generated += chars[rand];
    }
    return generated;
  },
  exportAllFrom: function (dir, skipIndex) {
    var modules = {};
    var files = fs.readdirSync(dir), len = files.length;
    skipIndex = skipIndex || true;
    if (skipIndex) {
      delete files[files.indexOf('index')];
    }
    for (var i = 0; i < len; i += 1) {
      var name = files[i].split('.')[0];
      modules[name] = require(dir + '/' + name);
    }
    return modules;
  }
};

module.exports = utils;